"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterGenerator = void 0;
const tslib_1 = require("tslib");
const decorator_generator_1 = require("./decorator.generator");
const common_1 = require("@nestjs/common");
const lodash_1 = require("lodash");
const procedure_generator_1 = require("./procedure.generator");
let RouterGenerator = class RouterGenerator {
    serializeRouters(routers, project) {
        return routers.map((router) => {
            const proceduresMetadata = router.procedures.map((procedure) => this.serializeRouterProcedures(router.path, procedure, router.name, project));
            return {
                name: router.name,
                alias: router.alias,
                procedures: proceduresMetadata,
            };
        });
    }
    serializeRouterProcedures(routerFilePath, procedure, routerName, project) {
        const sourceFile = project.addSourceFileAtPath(routerFilePath);
        const classDeclaration = sourceFile.getClass(routerName);
        if (!classDeclaration) {
            throw new Error(`Could not find router ${routerName} class declaration.`);
        }
        const methodDeclaration = classDeclaration.getMethod(procedure.name);
        if (!methodDeclaration) {
            throw new Error(`Could not find ${routerName}, method declarations.`);
        }
        const decorators = methodDeclaration.getDecorators();
        if (!decorators) {
            throw new Error(`could not find ${methodDeclaration.getName()}, method decorators.`);
        }
        const serializedDecorators = this.decoratorHandler.serializeProcedureDecorators(decorators, sourceFile, project);
        return {
            name: procedure.name,
            decorators: serializedDecorators,
        };
    }
    generateRoutersStringFromMetadata(routers) {
        return routers
            .map((router) => {
            const { name, procedures, alias } = router;
            return `${alias ?? (0, lodash_1.camelCase)(name)}: t.router({ ${procedures
                .map(this.procedureGenerator.generateProcedureString)
                .join(',\n')} })`;
        })
            .join(',\n');
    }
};
exports.RouterGenerator = RouterGenerator;
tslib_1.__decorate([
    (0, common_1.Inject)(decorator_generator_1.DecoratorGenerator),
    tslib_1.__metadata("design:type", decorator_generator_1.DecoratorGenerator)
], RouterGenerator.prototype, "decoratorHandler", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(procedure_generator_1.ProcedureGenerator),
    tslib_1.__metadata("design:type", procedure_generator_1.ProcedureGenerator)
], RouterGenerator.prototype, "procedureGenerator", void 0);
exports.RouterGenerator = RouterGenerator = tslib_1.__decorate([
    (0, common_1.Injectable)()
], RouterGenerator);
//# sourceMappingURL=router.generator.js.map