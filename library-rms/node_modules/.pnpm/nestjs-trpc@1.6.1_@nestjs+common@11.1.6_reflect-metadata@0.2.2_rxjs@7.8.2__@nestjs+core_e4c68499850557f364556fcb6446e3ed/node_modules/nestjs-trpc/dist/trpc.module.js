"use strict";
var TRPCModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRPCModule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const trpc_constants_1 = require("./trpc.constants");
const trpc_driver_1 = require("./trpc.driver");
const app_router_host_1 = require("./app-router.host");
const drivers_1 = require("./drivers");
const file_scanner_1 = require("./scanners/file.scanner");
const generator_module_1 = require("./generators/generator.module");
const factory_module_1 = require("./factories/factory.module");
const scanner_module_1 = require("./scanners/scanner.module");
let TRPCModule = TRPCModule_1 = class TRPCModule {
    static forRoot(options = {}) {
        const imports = [];
        if (options.autoSchemaFile != null) {
            const fileScanner = new file_scanner_1.FileScanner();
            const callerFilePath = fileScanner.getCallerFilePath();
            imports.push(generator_module_1.GeneratorModule.forRoot({
                outputDirPath: options.autoSchemaFile,
                rootModuleFilePath: callerFilePath,
                schemaFileImports: options.schemaFileImports,
                context: options.context,
            }));
        }
        return {
            module: TRPCModule_1,
            imports,
            providers: [{ provide: trpc_constants_1.TRPC_MODULE_OPTIONS, useValue: options }],
        };
    }
    async onModuleInit() {
        const httpAdapter = this.httpAdapterHost?.httpAdapter;
        if (!httpAdapter) {
            return;
        }
        this.consoleLogger.setContext(trpc_constants_1.LOGGER_CONTEXT);
        await this.trpcDriver.start(this.options);
        const platformName = httpAdapter.getType();
        if (this.appRouterHost.appRouter != null) {
            this.consoleLogger.log(`Server has been initialized successfully using the ${platformName} driver.`, 'TRPC Server');
        }
    }
};
exports.TRPCModule = TRPCModule;
tslib_1.__decorate([
    (0, common_1.Inject)(trpc_constants_1.TRPC_MODULE_OPTIONS),
    tslib_1.__metadata("design:type", Object)
], TRPCModule.prototype, "options", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(common_1.ConsoleLogger),
    tslib_1.__metadata("design:type", common_1.ConsoleLogger)
], TRPCModule.prototype, "consoleLogger", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(core_1.HttpAdapterHost),
    tslib_1.__metadata("design:type", core_1.HttpAdapterHost)
], TRPCModule.prototype, "httpAdapterHost", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(trpc_driver_1.TRPCDriver),
    tslib_1.__metadata("design:type", trpc_driver_1.TRPCDriver)
], TRPCModule.prototype, "trpcDriver", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(app_router_host_1.AppRouterHost),
    tslib_1.__metadata("design:type", app_router_host_1.AppRouterHost)
], TRPCModule.prototype, "appRouterHost", void 0);
exports.TRPCModule = TRPCModule = TRPCModule_1 = tslib_1.__decorate([
    (0, common_1.Module)({
        imports: [factory_module_1.FactoryModule, scanner_module_1.ScannerModule],
        providers: [
            // NestJS Providers
            common_1.ConsoleLogger,
            // Drivers
            trpc_driver_1.TRPCDriver,
            drivers_1.FastifyDriver,
            drivers_1.ExpressDriver,
            // Exports
            app_router_host_1.AppRouterHost,
        ],
        exports: [app_router_host_1.AppRouterHost],
    })
], TRPCModule);
//# sourceMappingURL=trpc.module.js.map