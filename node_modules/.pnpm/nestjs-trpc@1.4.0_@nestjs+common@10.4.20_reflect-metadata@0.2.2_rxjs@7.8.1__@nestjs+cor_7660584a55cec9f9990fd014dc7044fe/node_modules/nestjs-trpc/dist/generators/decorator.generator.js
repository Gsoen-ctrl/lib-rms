"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecoratorGenerator = void 0;
const tslib_1 = require("tslib");
const file_util_1 = require("../utils/file.util");
const common_1 = require("@nestjs/common");
let DecoratorGenerator = class DecoratorGenerator {
    serializeProcedureDecorators(decorators, sourceFile, project) {
        return decorators.reduce((array, decorator) => {
            const decoratorName = decorator.getName();
            if (decoratorName === 'Query' || decoratorName === 'Mutation') {
                const input = (0, file_util_1.getDecoratorPropertyValue)(decorator, 'input', sourceFile, project);
                const output = (0, file_util_1.getDecoratorPropertyValue)(decorator, 'output', sourceFile, project);
                array.push({
                    name: decoratorName,
                    arguments: {
                        ...(input ? { input } : {}),
                        ...(output ? { output } : {}),
                    },
                });
            }
            else if (decoratorName === 'Middlewares') {
                return array;
            }
            else {
                this.consoleLogger.warn(`Decorator ${decoratorName}, not supported.`);
            }
            return array;
        }, []);
    }
};
exports.DecoratorGenerator = DecoratorGenerator;
tslib_1.__decorate([
    (0, common_1.Inject)(common_1.ConsoleLogger),
    tslib_1.__metadata("design:type", common_1.ConsoleLogger)
], DecoratorGenerator.prototype, "consoleLogger", void 0);
exports.DecoratorGenerator = DecoratorGenerator = tslib_1.__decorate([
    (0, common_1.Injectable)()
], DecoratorGenerator);
