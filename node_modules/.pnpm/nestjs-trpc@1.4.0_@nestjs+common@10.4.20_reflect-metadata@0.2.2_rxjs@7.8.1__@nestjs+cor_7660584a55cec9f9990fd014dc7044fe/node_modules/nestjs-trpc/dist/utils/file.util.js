"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateStaticDeclaration = generateStaticDeclaration;
exports.saveOrOverrideFile = saveOrOverrideFile;
exports.getDecoratorPropertyValue = getDecoratorPropertyValue;
const ts_morph_1 = require("ts-morph");
const type_util_1 = require("./type.util");
function generateStaticDeclaration(sourceFile) {
    sourceFile.addImportDeclaration({
        kind: ts_morph_1.StructureKind.ImportDeclaration,
        moduleSpecifier: '@trpc/server',
        namedImports: ['initTRPC'],
    });
    sourceFile.addImportDeclaration({
        kind: ts_morph_1.StructureKind.ImportDeclaration,
        moduleSpecifier: 'zod',
        namedImports: ['z'],
    });
    sourceFile.addVariableStatements([
        {
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            declarations: [{ name: 't', initializer: 'initTRPC.create()' }],
        },
        {
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            declarations: [{ name: 'publicProcedure', initializer: 't.procedure' }],
        },
    ]);
}
async function saveOrOverrideFile(sourceFile) {
    sourceFile.formatText({ indentSize: 2 });
    await sourceFile.save();
}
function getDecoratorPropertyValue(decorator, propertyName, sourceFile, project) {
    const args = decorator.getArguments();
    for (const arg of args) {
        if (arg.getKind() === ts_morph_1.SyntaxKind.ObjectLiteralExpression) {
            const properties = arg.getProperties();
            const property = properties.find((p) => p.getName() === propertyName);
            if (!property) {
                return null;
            }
            const propertyInitializer = property.getInitializer();
            return (0, type_util_1.flattenZodSchema)(propertyInitializer, sourceFile, project, propertyInitializer.getText());
        }
    }
    return null;
}
