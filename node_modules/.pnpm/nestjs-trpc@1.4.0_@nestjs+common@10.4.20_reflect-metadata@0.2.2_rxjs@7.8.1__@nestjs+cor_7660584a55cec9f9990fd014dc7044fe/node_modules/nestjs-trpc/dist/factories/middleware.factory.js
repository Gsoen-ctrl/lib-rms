"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiddlewareFactory = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const router_factory_1 = require("./router.factory");
const procedure_factory_1 = require("./procedure.factory");
let MiddlewareFactory = class MiddlewareFactory {
    getMiddlewares() {
        const routers = this.routerFactory.getRouters();
        const middlewares = routers.flatMap((route) => {
            const { instance } = route;
            const prototype = Object.getPrototypeOf(instance);
            const procedures = this.procedureFactory.getProcedures(instance, prototype);
            return procedures.flatMap((procedure) => {
                return procedure.middlewares != null ? procedure.middlewares : [];
            });
        });
        // Returns a unique middleware array since we need to generate types only one time.
        return [...new Set(middlewares)];
    }
};
exports.MiddlewareFactory = MiddlewareFactory;
tslib_1.__decorate([
    (0, common_1.Inject)(router_factory_1.RouterFactory),
    tslib_1.__metadata("design:type", router_factory_1.RouterFactory)
], MiddlewareFactory.prototype, "routerFactory", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(procedure_factory_1.ProcedureFactory),
    tslib_1.__metadata("design:type", procedure_factory_1.ProcedureFactory)
], MiddlewareFactory.prototype, "procedureFactory", void 0);
exports.MiddlewareFactory = MiddlewareFactory = tslib_1.__decorate([
    (0, common_1.Injectable)()
], MiddlewareFactory);
