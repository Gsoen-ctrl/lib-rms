"use strict";
var GeneratorModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratorModule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const ts_morph_1 = require("ts-morph");
const trpc_generator_1 = require("./trpc.generator");
const router_generator_1 = require("./router.generator");
const static_generator_1 = require("./static.generator");
const context_generator_1 = require("./context.generator");
const middleware_generator_1 = require("./middleware.generator");
const decorator_generator_1 = require("./decorator.generator");
const procedure_generator_1 = require("./procedure.generator");
const generator_constants_1 = require("./generator.constants");
const trpc_constants_1 = require("../trpc.constants");
const factory_module_1 = require("../factories/factory.module");
const scanner_module_1 = require("../scanners/scanner.module");
const path = tslib_1.__importStar(require("node:path"));
let GeneratorModule = GeneratorModule_1 = class GeneratorModule {
    static forRoot(options) {
        const defaultCompilerOptions = {
            target: ts_morph_1.ScriptTarget.ES2019,
            module: ts_morph_1.ModuleKind.CommonJS,
            emitDecoratorMetadata: true,
            experimentalDecorators: true,
            allowJs: true,
            checkJs: true,
            esModuleInterop: true,
        };
        const project = new ts_morph_1.Project({ compilerOptions: defaultCompilerOptions });
        const appRouterSourceFile = project.createSourceFile(path.resolve(options.outputDirPath ?? './', 'server.ts'), () => { }, { overwrite: true });
        return {
            module: GeneratorModule_1,
            providers: [
                {
                    provide: trpc_constants_1.TRPC_MODULE_CALLER_FILE_PATH,
                    useValue: options.rootModuleFilePath,
                },
                { provide: generator_constants_1.TYPESCRIPT_PROJECT, useValue: project },
                {
                    provide: generator_constants_1.TYPESCRIPT_APP_ROUTER_SOURCE_FILE,
                    useValue: appRouterSourceFile,
                },
                { provide: trpc_constants_1.TRPC_GENERATOR_OPTIONS, useValue: options },
            ],
        };
    }
    async onModuleInit() {
        await this.trpcGenerator.generateSchemaFile(this.options.schemaFileImports);
        await this.trpcGenerator.generateHelpersFile(this.options.context);
    }
};
exports.GeneratorModule = GeneratorModule;
tslib_1.__decorate([
    (0, common_1.Inject)(trpc_generator_1.TRPCGenerator),
    tslib_1.__metadata("design:type", trpc_generator_1.TRPCGenerator)
], GeneratorModule.prototype, "trpcGenerator", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(trpc_constants_1.TRPC_GENERATOR_OPTIONS),
    tslib_1.__metadata("design:type", Object)
], GeneratorModule.prototype, "options", void 0);
exports.GeneratorModule = GeneratorModule = GeneratorModule_1 = tslib_1.__decorate([
    (0, common_1.Module)({
        imports: [factory_module_1.FactoryModule, scanner_module_1.ScannerModule],
        providers: [
            // NestJS Providers
            common_1.ConsoleLogger,
            core_1.MetadataScanner,
            // Local Providers
            trpc_generator_1.TRPCGenerator,
            router_generator_1.RouterGenerator,
            procedure_generator_1.ProcedureGenerator,
            decorator_generator_1.DecoratorGenerator,
            middleware_generator_1.MiddlewareGenerator,
            context_generator_1.ContextGenerator,
            static_generator_1.StaticGenerator,
        ],
        exports: [trpc_generator_1.TRPCGenerator],
    })
], GeneratorModule);
//# sourceMappingURL=generator.module.js.map