"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecoratorGenerator = void 0;
const tslib_1 = require("tslib");
const ts_morph_1 = require("ts-morph");
const common_1 = require("@nestjs/common");
const procedure_generator_1 = require("./procedure.generator");
let DecoratorGenerator = class DecoratorGenerator {
    serializeProcedureDecorators(decorators, sourceFile, project) {
        return decorators.reduce((array, decorator) => {
            const decoratorName = decorator.getName();
            if (decoratorName === 'Query' || decoratorName === 'Mutation') {
                const input = this.getDecoratorPropertyValue(decorator, 'input', sourceFile, project);
                const output = this.getDecoratorPropertyValue(decorator, 'output', sourceFile, project);
                array.push({
                    name: decoratorName,
                    arguments: {
                        ...(input ? { input } : {}),
                        ...(output ? { output } : {}),
                    },
                });
            }
            else if (decoratorName === 'UseMiddlewares' || decoratorName === 'Middlewares') {
                return array;
            }
            else {
                this.consoleLogger.warn(`Decorator ${decoratorName}, not supported.`);
            }
            return array;
        }, []);
    }
    getDecoratorPropertyValue(decorator, propertyName, sourceFile, project) {
        const args = decorator.getArguments();
        for (const arg of args) {
            if (arg.getKind() === ts_morph_1.SyntaxKind.ObjectLiteralExpression) {
                const properties = arg.getProperties();
                const property = properties.find((p) => p.getName() === propertyName);
                if (!property) {
                    return null;
                }
                const propertyInitializer = property.getInitializer();
                return this.procedureGenerator.flattenZodSchema(propertyInitializer, sourceFile, project, propertyInitializer.getText());
            }
        }
        return null;
    }
};
exports.DecoratorGenerator = DecoratorGenerator;
tslib_1.__decorate([
    (0, common_1.Inject)(common_1.ConsoleLogger),
    tslib_1.__metadata("design:type", common_1.ConsoleLogger)
], DecoratorGenerator.prototype, "consoleLogger", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(procedure_generator_1.ProcedureGenerator),
    tslib_1.__metadata("design:type", procedure_generator_1.ProcedureGenerator)
], DecoratorGenerator.prototype, "procedureGenerator", void 0);
exports.DecoratorGenerator = DecoratorGenerator = tslib_1.__decorate([
    (0, common_1.Injectable)()
], DecoratorGenerator);
//# sourceMappingURL=decorator.generator.js.map