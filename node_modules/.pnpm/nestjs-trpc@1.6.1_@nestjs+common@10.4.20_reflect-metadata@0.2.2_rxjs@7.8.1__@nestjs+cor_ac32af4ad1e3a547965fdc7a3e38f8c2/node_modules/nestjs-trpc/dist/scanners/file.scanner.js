"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileScanner = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const fs = tslib_1.__importStar(require("node:fs"));
const path = tslib_1.__importStar(require("node:path"));
/**
 * For this specific file, using a static reference is desirable since `getCallerFilePath` uses a stack-trace to figure out the caller.
 * If this clas is injected through dependency injection, that stack-trace will vary!
 */
let FileScanner = class FileScanner {
    getCallerFilePath(skip = 2) {
        const originalPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = (_, stack) => stack;
        const error = new Error();
        const stack = error.stack;
        Error.prepareStackTrace = originalPrepareStackTrace;
        const caller = stack[skip];
        const jsFilePath = caller?.getFileName();
        if (jsFilePath == null) {
            throw new Error(`Could not find caller file: ${caller}`);
        }
        const sourceMap = this.getSourceMapFromJSPath(jsFilePath);
        return this.normalizePath(path.resolve(jsFilePath, '..', sourceMap.sources[0]));
    }
    normalizePath(p) {
        return path.resolve(p.replace(/\\/g, '/'));
    }
    getPlatformPath(path) {
        const exec = /^\/(\w*):(.*)/.exec(path);
        return /^win/.test(process.platform) && exec
            ? `${exec[1]}:\\${exec[2].replace(/\//g, '\\')}`
            : path;
    }
    getSourceMapFromJSPath(sourcePath) {
        const SOURCE_MAP_REGEX = /\/\/# sourceMappingURL=(.*\.map)$/m;
        const filePath = this.getPlatformPath(sourcePath);
        const content = fs.readFileSync(filePath, { encoding: 'utf8' });
        const exec = SOURCE_MAP_REGEX.exec(content);
        if (exec == null) {
            throw new Error(`Could not find source file for path ${sourcePath}, make sure "sourceMap" is enabled in your tsconfig.`);
        }
        const sourceMapPath = path.resolve(filePath, '..', exec[1]);
        const sourceMapContent = fs.readFileSync(sourceMapPath, {
            encoding: 'utf8',
        });
        return JSON.parse(sourceMapContent);
    }
};
exports.FileScanner = FileScanner;
exports.FileScanner = FileScanner = tslib_1.__decorate([
    (0, common_1.Injectable)()
], FileScanner);
//# sourceMappingURL=file.scanner.js.map