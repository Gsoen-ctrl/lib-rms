"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiddlewareFactory = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const router_factory_1 = require("./router.factory");
const procedure_factory_1 = require("./procedure.factory");
const lodash_1 = require("lodash");
let MiddlewareFactory = class MiddlewareFactory {
    getMiddlewares() {
        const routers = this.routerFactory.getRouters();
        const middlewaresMetadata = routers.flatMap((router) => {
            const { instance, middlewares, path } = router;
            const prototype = Object.getPrototypeOf(instance);
            const procedures = this.procedureFactory.getProcedures(instance, prototype);
            const procedureMiddleware = procedures.flatMap((procedure) => {
                return procedure.middlewares != null ? procedure.middlewares : [];
            });
            return [...middlewares, ...procedureMiddleware].map((middleware) => ({
                path,
                instance: middleware,
            }));
        });
        // Return a unique array of middlewares based on both path and instances
        return (0, lodash_1.uniqWith)(middlewaresMetadata, lodash_1.isEqual);
    }
};
exports.MiddlewareFactory = MiddlewareFactory;
tslib_1.__decorate([
    (0, common_1.Inject)(router_factory_1.RouterFactory),
    tslib_1.__metadata("design:type", router_factory_1.RouterFactory)
], MiddlewareFactory.prototype, "routerFactory", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(procedure_factory_1.ProcedureFactory),
    tslib_1.__metadata("design:type", procedure_factory_1.ProcedureFactory)
], MiddlewareFactory.prototype, "procedureFactory", void 0);
exports.MiddlewareFactory = MiddlewareFactory = tslib_1.__decorate([
    (0, common_1.Injectable)()
], MiddlewareFactory);
//# sourceMappingURL=middleware.factory.js.map